import React, { useState, useEffect } from "react";
import { CompetitorBrief } from "@/entities/CompetitorBrief";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Plus, FileText, Clock, CheckCircle, AlertCircle, TrendingUp, Users, Target, DollarSign } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";

export default function Dashboard() {
  const [briefs, setBriefs] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState({
    total: 0,
    completed: 0,
    inProgress: 0,
    thisMonth: 0
  });

  useEffect(() => {
    loadBriefs();
  }, []);

  const loadBriefs = async () => {
    try {
      const data = await CompetitorBrief.list('-created_date', 20);
      setBriefs(data);
      
      const now = new Date();
      const thisMonth = data.filter(brief => {
        const briefDate = new Date(brief.created_date);
        return briefDate.getMonth() === now.getMonth() && 
               briefDate.getFullYear() === now.getFullYear();
      });

      setStats({
        total: data.length,
        completed: data.filter(b => b.status === 'completed').length,
        inProgress: data.filter(b => b.status === 'researching' || b.status === 'analyzing').length,
        thisMonth: thisMonth.length
      });
    } catch (error) {
      console.error('Error loading briefs:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'researching': 
      case 'analyzing': return <Clock className="w-4 h-4 text-blue-600" />;
      case 'error': return <AlertCircle className="w-4 h-4 text-red-600" />;
      default: return <FileText className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'researching': 
      case 'analyzing': return 'bg-blue-100 text-blue-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="p-8">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {Array(4).fill(0).map((_, i) => (
                <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 min-h-screen" style={{ background: 'var(--bg-primary)' }}>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Competitor Intelligence Dashboard</h1>
            <p className="text-gray-600">Monitor and analyze your competitive landscape</p>
          </div>
          <Link to={createPageUrl("CreateBrief")}>
            <Button className="neu-button neu-raised bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white border-none px-6 py-3 rounded-xl">
              <Plus className="w-4 h-4 mr-2" />
              New Analysis
            </Button>
          </Link>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="neu-card neu-raised border-none">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-600">Total Analyses</CardTitle>
                <TrendingUp className="w-4 h-4 text-blue-500" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{stats.total}</div>
              <p className="text-xs text-gray-500 mt-1">All time</p>
            </CardContent>
          </Card>

          <Card className="neu-card neu-raised border-none">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-600">Completed</CardTitle>
                <CheckCircle className="w-4 h-4 text-green-500" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{stats.completed}</div>
              <p className="text-xs text-gray-500 mt-1">Ready to present</p>
            </CardContent>
          </Card>

          <Card className="neu-card neu-raised border-none">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-600">In Progress</CardTitle>
                <Clock className="w-4 h-4 text-blue-500" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{stats.inProgress}</div>
              <p className="text-xs text-gray-500 mt-1">Currently analyzing</p>
            </CardContent>
          </Card>

          <Card className="neu-card neu-raised border-none">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-600">This Month</CardTitle>
                <Users className="w-4 h-4 text-purple-500" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{stats.thisMonth}</div>
              <p className="text-xs text-gray-500 mt-1">New this month</p>
            </CardContent>
          </Card>
        </div>

        {/* Recent Briefs */}
        <Card className="neu-card neu-raised border-none">
          <CardHeader>
            <CardTitle className="text-xl font-semibold flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Recent Competitor Analyses
            </CardTitle>
          </CardHeader>
          <CardContent>
            {briefs.length === 0 ? (
              <div className="text-center py-12">
                <div className="neu-inset rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                  <FileText className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">No analyses yet</h3>
                <p className="text-gray-500 mb-6">Start by creating your first competitor analysis</p>
                <Link to={createPageUrl("CreateBrief")}>
                  <Button className="neu-button neu-raised bg-gradient-to-r from-blue-500 to-blue-600 text-white border-none">
                    <Plus className="w-4 h-4 mr-2" />
                    Create Analysis
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="space-y-4">
                {briefs.map((brief) => (
                  <div key={brief.id} className="neu-inset rounded-xl p-4 hover:neu-raised transition-all duration-200 cursor-pointer">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="neu-raised rounded-lg p-3">
                          {getStatusIcon(brief.status)}
                        </div>
                        <div>
                          <h4 className="font-semibold text-gray-900">{brief.competitor_name}</h4>
                          <p className="text-sm text-gray-500">{brief.industry}</p>
                          <p className="text-xs text-gray-400 mt-1">
                            Created {format(new Date(brief.created_date), 'MMM d, yyyy')}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Badge className={`${getStatusColor(brief.status)} border-none`}>
                          {brief.status.replace('_', ' ')}
                        </Badge>
                        <Link to={createPageUrl(`BriefDetail?id=${brief.id}`)}>
                          <Button variant="ghost" size="sm" className="neu-button">
                            View Details
                          </Button>
                        </Link>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}