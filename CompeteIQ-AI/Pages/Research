import React, { useState, useEffect } from "react";
import { CompetitorBrief } from "@/entities/CompetitorBrief";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Search, Filter, Calendar, Building2, Globe, Eye } from "lucide-react";
import { format } from "date-fns";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function Research() {
  const [briefs, setBriefs] = useState([]);
  const [filteredBriefs, setFilteredBriefs] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [industryFilter, setIndustryFilter] = useState("all");

  useEffect(() => {
    loadBriefs();
  }, []);

  useEffect(() => {
    filterBriefs();
  }, [briefs, searchTerm, statusFilter, industryFilter]);

  const loadBriefs = async () => {
    try {
      const data = await CompetitorBrief.list('-created_date');
      setBriefs(data);
    } catch (error) {
      console.error('Error loading briefs:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const filterBriefs = () => {
    let filtered = briefs;

    if (searchTerm) {
      filtered = filtered.filter(brief => 
        brief.competitor_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        brief.industry.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      filtered = filtered.filter(brief => brief.status === statusFilter);
    }

    if (industryFilter !== "all") {
      filtered = filtered.filter(brief => brief.industry === industryFilter);
    }

    setFilteredBriefs(filtered);
  };

  const getUniqueIndustries = () => {
    const industries = [...new Set(briefs.map(brief => brief.industry))];
    return industries.sort();
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'researching': 
      case 'analyzing': return 'bg-blue-100 text-blue-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="p-8">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Array(6).fill(0).map((_, i) => (
                <div key={i} className="h-64 bg-gray-200 rounded-lg"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 min-h-screen" style={{ background: 'var(--bg-primary)' }}>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Research Hub</h1>
          <p className="text-gray-600">Explore and manage all competitor analyses</p>
        </div>

        {/* Filters */}
        <Card className="neu-card neu-raised border-none mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="w-5 h-5" />
              Search & Filter
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <Input
                  className="neu-input neu-inset pl-10"
                  placeholder="Search companies or industries..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>

              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="neu-input neu-inset">
                  <SelectValue placeholder="All Statuses" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                  <SelectItem value="researching">Researching</SelectItem>
                  <SelectItem value="analyzing">Analyzing</SelectItem>
                  <SelectItem value="error">Error</SelectItem>
                </SelectContent>
              </Select>

              <Select value={industryFilter} onValueChange={setIndustryFilter}>
                <SelectTrigger className="neu-input neu-inset">
                  <SelectValue placeholder="All Industries" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Industries</SelectItem>
                  {getUniqueIndustries().map((industry) => (
                    <SelectItem key={industry} value={industry}>{industry}</SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Button 
                variant="outline"
                onClick={() => {
                  setSearchTerm("");
                  setStatusFilter("all");
                  setIndustryFilter("all");
                }}
                className="neu-button neu-raised"
              >
                Clear Filters
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredBriefs.map((brief) => (
            <Card key={brief.id} className="neu-card neu-raised border-none hover:neu-pressed transition-all duration-200 cursor-pointer group">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <div className="neu-raised rounded-lg p-2">
                      <Building2 className="w-5 h-5 text-blue-500" />
                    </div>
                    <div>
                      <CardTitle className="text-lg">{brief.competitor_name}</CardTitle>
                      <p className="text-sm text-gray-500">{brief.industry}</p>
                    </div>
                  </div>
                  <Badge className={`${getStatusColor(brief.status)} border-none text-xs`}>
                    {brief.status.replace('_', ' ')}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Globe className="w-4 h-4" />
                    <span className="truncate">{brief.competitor_website}</span>
                  </div>
                  
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Calendar className="w-4 h-4" />
                    <span>Created {format(new Date(brief.created_date), 'MMM d, yyyy')}</span>
                  </div>

                  {brief.status === 'completed' && brief.swot_analysis && (
                    <div className="neu-inset rounded-lg p-3 mt-4">
                      <div className="grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="text-green-600 font-medium">
                            {brief.swot_analysis.strengths?.length || 0} Strengths
                          </span>
                        </div>
                        <div>
                          <span className="text-red-600 font-medium">
                            {brief.swot_analysis.weaknesses?.length || 0} Weaknesses
                          </span>
                        </div>
                        <div>
                          <span className="text-blue-600 font-medium">
                            {brief.swot_analysis.opportunities?.length || 0} Opportunities
                          </span>
                        </div>
                        <div>
                          <span className="text-purple-600 font-medium">
                            {brief.swot_analysis.threats?.length || 0} Threats
                          </span>
                        </div>
                      </div>
                    </div>
                  )}

                  <Link to={createPageUrl(`BriefDetail?id=${brief.id}`)} className="block">
                    <Button className="w-full neu-button neu-raised mt-4 bg-white border-none group-hover:bg-blue-50 transition-colors">
                      <Eye className="w-4 h-4 mr-2" />
                      View Analysis
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredBriefs.length === 0 && !isLoading && (
          <div className="text-center py-12">
            <div className="neu-inset rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <Search className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No results found</h3>
            <p className="text-gray-500 mb-6">Try adjusting your search terms or filters</p>
            <Link to={createPageUrl("CreateBrief")}>
              <Button className="neu-button neu-raised bg-gradient-to-r from-blue-500 to-blue-600 text-white border-none">
                Create New Analysis
              </Button>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}