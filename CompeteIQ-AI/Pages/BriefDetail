
import React, { useState, useEffect } from "react";
import { CompetitorBrief } from "@/entities/CompetitorBrief";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  Download, 
  Loader2, 
  CheckCircle, 
  AlertTriangle, 
  Target, 
  DollarSign, 
  Users, 
  TrendingUp,
  FileText,
  Presentation,
  MessageCircle
} from "lucide-react";

import ChatBot from "../components/briefdetail/ChatBot";

export default function BriefDetail() {
  const navigate = useNavigate();
  const [brief, setBrief] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadBrief();
  }, []);

  const loadBrief = async () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const briefId = urlParams.get('id');
      
      if (!briefId) {
        setError('Brief ID not found');
        return;
      }

      const briefData = await CompetitorBrief.filter({ id: briefId });
      if (briefData.length === 0) {
        setError('Brief not found');
        return;
      }

      setBrief(briefData[0]);
    } catch (err) {
      setError('Error loading brief');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusInfo = (status) => {
    switch (status) {
      case 'completed':
        return { icon: CheckCircle, text: 'Analysis Complete', color: 'bg-green-100 text-green-800' };
      case 'researching':
        return { icon: Loader2, text: 'Researching', color: 'bg-blue-100 text-blue-800' };
      case 'analyzing':
        return { icon: Loader2, text: 'Analyzing', color: 'bg-blue-100 text-blue-800' };
      case 'error':
        return { icon: AlertTriangle, text: 'Error', color: 'bg-red-100 text-red-800' };
      default:
        return { icon: FileText, text: 'Draft', color: 'bg-gray-100 text-gray-800' };
    }
  };

  if (isLoading) {
    return (
      <div className="p-8 min-h-screen" style={{ background: 'var(--bg-primary)' }}>
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="h-64 bg-gray-200 rounded-lg"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !brief) {
    return (
      <div className="p-8 min-h-screen" style={{ background: 'var(--bg-primary)' }}>
        <div className="max-w-6xl mx-auto text-center">
          <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Brief Not Found</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <Button onClick={() => navigate(createPageUrl("Dashboard"))}>
            Return to Dashboard
          </Button>
        </div>
      </div>
    );
  }

  const statusInfo = getStatusInfo(brief.status);

  return (
    <div className="p-8 min-h-screen" style={{ background: 'var(--bg-primary)' }}>
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Button 
              variant="ghost" 
              onClick={() => navigate(createPageUrl("Dashboard"))}
              className="neu-button neu-raised p-2 rounded-lg"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{brief.competitor_name}</h1>
              <p className="text-gray-600">{brief.industry} â€¢ Competitive Analysis</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <Badge className={`${statusInfo.color} border-none`}>
              <statusInfo.icon className={`w-3 h-3 mr-1 ${brief.status === 'researching' || brief.status === 'analyzing' ? 'animate-spin' : ''}`} />
              {statusInfo.text}
            </Badge>
            {brief.status === 'completed' && (
              <Button className="neu-button neu-raised bg-gradient-to-r from-green-500 to-green-600 text-white border-none">
                <Download className="w-4 h-4 mr-2" />
                Export Brief
              </Button>
            )}
          </div>
        </div>

        {brief.status === 'completed' ? (
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList className="neu-raised bg-white p-1 rounded-xl">
              <TabsTrigger value="overview" className="neu-button rounded-lg">Overview</TabsTrigger>
              <TabsTrigger value="swot" className="neu-button rounded-lg">SWOT Analysis</TabsTrigger>
              <TabsTrigger value="pricing" className="neu-button rounded-lg">Pricing</TabsTrigger>
              <TabsTrigger value="personas" className="neu-button rounded-lg">Target Personas</TabsTrigger>
              <TabsTrigger value="predictions" className="neu-button rounded-lg">Predictions</TabsTrigger>
              <TabsTrigger value="slides" className="neu-button rounded-lg">Executive Brief</TabsTrigger>
              <TabsTrigger value="chat" className="neu-button rounded-lg">
                <MessageCircle className="w-4 h-4 mr-1" />
                AI Assistant
              </TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="w-5 h-5" />
                      Value Proposition
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{brief.value_proposition?.positioning_statement}</p>
                    <div className="space-y-2">
                      <h4 className="font-medium text-gray-900">Key Value Props:</h4>
                      <ul className="space-y-1">
                        {brief.value_proposition?.key_value_props?.map((prop, index) => (
                          <li key={index} className="text-sm text-gray-600 flex items-start">
                            <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                            {prop}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>

                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <DollarSign className="w-5 h-5" />
                      Pricing Strategy
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-medium text-gray-900">Pricing Model</h4>
                        <p className="text-sm text-gray-600">{brief.pricing_analysis?.pricing_model}</p>
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-900">Price Range</h4>
                        <p className="text-sm text-gray-600">{brief.pricing_analysis?.price_range}</p>
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-900">Strategy</h4>
                        <p className="text-sm text-gray-600">{brief.pricing_analysis?.pricing_strategy}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="swot" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="text-green-700">Strengths</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {brief.swot_analysis?.strengths?.map((strength, index) => (
                        <li key={index} className="text-sm text-gray-700 flex items-start">
                          <CheckCircle className="w-4 h-4 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                          {strength}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="text-red-700">Weaknesses</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {brief.swot_analysis?.weaknesses?.map((weakness, index) => (
                        <li key={index} className="text-sm text-gray-700 flex items-start">
                          <AlertTriangle className="w-4 h-4 text-red-500 mr-2 flex-shrink-0 mt-0.5" />
                          {weakness}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="text-blue-700">Opportunities</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {brief.swot_analysis?.opportunities?.map((opportunity, index) => (
                        <li key={index} className="text-sm text-gray-700 flex items-start">
                          <TrendingUp className="w-4 h-4 text-blue-500 mr-2 flex-shrink-0 mt-0.5" />
                          {opportunity}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card className="neu-card neu-raised border-none">
                  <CardHeader>
                    <CardTitle className="text-purple-700">Threats</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {brief.swot_analysis?.threats?.map((threat, index) => (
                        <li key={index} className="text-sm text-gray-700 flex items-start">
                          <AlertTriangle className="w-4 h-4 text-purple-500 mr-2 flex-shrink-0 mt-0.5" />
                          {threat}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="pricing">
              <Card className="neu-card neu-raised border-none">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <DollarSign className="w-5 h-5" />
                    Detailed Pricing Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="neu-inset rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-2">Pricing Model</h4>
                      <p className="text-gray-600">{brief.pricing_analysis?.pricing_model}</p>
                    </div>
                    <div className="neu-inset rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-2">Price Range</h4>
                      <p className="text-gray-600">{brief.pricing_analysis?.price_range}</p>
                    </div>
                    <div className="neu-inset rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-2">Strategy</h4>
                      <p className="text-gray-600">{brief.pricing_analysis?.pricing_strategy}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="personas">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {brief.target_personas?.map((persona, index) => (
                  <Card key={index} className="neu-card neu-raised border-none">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Users className="w-5 h-5" />
                        {persona.persona_name}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-600 mb-4">{persona.description}</p>
                      <div>
                        <h5 className="font-medium text-gray-900 mb-2">Key Characteristics:</h5>
                        <ul className="space-y-1">
                          {persona.key_characteristics?.map((char, charIndex) => (
                            <li key={charIndex} className="text-sm text-gray-600 flex items-start">
                              <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                              {char}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="predictions">
              <Card className="neu-card neu-raised border-none">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Competitive Predictions (Next 6-12 Months)
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="neu-inset rounded-lg p-6">
                    <h4 className="font-semibold text-gray-900 mb-3">Likely Strategic Moves</h4>
                    <ul className="space-y-3">
                      {brief.competitive_predictions?.likely_moves?.map((move, index) => (
                        <li key={index} className="text-gray-700 flex items-start">
                          <TrendingUp className="w-4 h-4 text-blue-500 mr-3 flex-shrink-0 mt-0.5" />
                          {move}
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="neu-inset rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-2">Rationale</h4>
                      <p className="text-gray-600">{brief.competitive_predictions?.rationale}</p>
                    </div>
                    <div className="neu-inset rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-2">Timeline</h4>
                      <p className="text-gray-600">{brief.competitive_predictions?.timeline}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="slides">
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold text-gray-900">Executive Brief - 4 Slide Summary</h2>
                  <Button className="neu-button neu-raised bg-gradient-to-r from-green-500 to-green-600 text-white border-none">
                    <Presentation className="w-4 h-4 mr-2" />
                    Export as PowerPoint
                  </Button>
                </div>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {brief.brief_slides?.map((slide, index) => (
                    <Card key={index} className="neu-card neu-raised border-none">
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          <span className="neu-inset rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                            {slide.slide_number}
                          </span>
                          {slide.title}
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-gray-700 mb-4">{slide.content}</p>
                        <div>
                          <h5 className="font-medium text-gray-900 mb-2">Key Points:</h5>
                          <ul className="space-y-1">
                            {slide.key_points?.map((point, pointIndex) => (
                              <li key={pointIndex} className="text-sm text-gray-600 flex items-start">
                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                                {point}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="chat">
              <ChatBot brief={brief} />
            </TabsContent>
          </Tabs>
        ) : (
          <Card className="neu-card neu-raised border-none">
            <CardContent className="py-12">
              <div className="text-center">
                <div className="neu-inset rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                  <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {brief.status === 'researching' ? 'Researching Competitor' : 'Analyzing Data'}
                </h3>
                <p className="text-gray-600 mb-6">
                  {brief.status === 'researching' 
                    ? 'Gathering data from multiple sources including company website, investor reports, and third-party reviews...'
                    : 'Processing research data and generating competitive intelligence insights...'
                  }
                </p>
                <div className="max-w-md mx-auto">
                  <div className="flex justify-between text-sm text-gray-500 mb-2">
                    <span>{brief.status === 'researching' ? 'Gathering data...' : 'Analyzing insights...'}</span>
                    <span>{brief.status === 'researching' ? 'Step 1 of 2' : 'Step 2 of 2'}</span>
                  </div>
                  <div className="neu-inset rounded-full h-2">
                    <div 
                      className="bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full animate-pulse" 
                      style={{width: brief.status === 'researching' ? '50%' : '90%'}}
                    ></div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}