import React, { useState, useRef, useEffect } from "react";
import { InvokeLLM } from "@/integrations/Core";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { MessageCircle, Send, Loader2, Bot, User, Sparkles } from "lucide-react";
import { format } from "date-fns";

const SUGGESTED_QUESTIONS = [
  "What are their biggest competitive threats?",
  "How does their pricing compare to industry standards?",
  "What market opportunities should we watch for?",
  "What's their likely next strategic move?",
  "How strong is their market position?",
  "What are their key differentiators?"
];

export default function ChatBot({ brief }) {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (message = inputMessage) => {
    if (!message.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: "user",
      content: message.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      const analysisContext = `
        You are an AI assistant helping analyze competitor intelligence for ${brief.competitor_name}.
        
        Here's the complete analysis data:
        
        Company: ${brief.competitor_name}
        Website: ${brief.competitor_website}
        Industry: ${brief.industry}
        
        SWOT Analysis:
        - Strengths: ${brief.swot_analysis?.strengths?.join(", ") || "Not available"}
        - Weaknesses: ${brief.swot_analysis?.weaknesses?.join(", ") || "Not available"}
        - Opportunities: ${brief.swot_analysis?.opportunities?.join(", ") || "Not available"}
        - Threats: ${brief.swot_analysis?.threats?.join(", ") || "Not available"}
        
        Pricing Analysis:
        - Model: ${brief.pricing_analysis?.pricing_model || "Not available"}
        - Range: ${brief.pricing_analysis?.price_range || "Not available"}
        - Strategy: ${brief.pricing_analysis?.pricing_strategy || "Not available"}
        
        Value Proposition:
        - Key Value Props: ${brief.value_proposition?.key_value_props?.join(", ") || "Not available"}
        - Positioning: ${brief.value_proposition?.positioning_statement || "Not available"}
        - Differentiation: ${brief.value_proposition?.differentiation?.join(", ") || "Not available"}
        
        Target Personas: ${brief.target_personas?.map(p => `${p.persona_name}: ${p.description}`).join("; ") || "Not available"}
        
        Competitive Predictions:
        - Likely Moves: ${brief.competitive_predictions?.likely_moves?.join(", ") || "Not available"}
        - Rationale: ${brief.competitive_predictions?.rationale || "Not available"}
        
        Research Data: ${JSON.stringify(brief.research_data || {})}
        
        User Question: ${message}
        
        Please provide a helpful, specific answer based on this analysis. Be conversational but professional, and reference specific data points from the analysis when relevant.
      `;

      const response = await InvokeLLM({
        prompt: analysisContext
      });

      const aiMessage = {
        id: Date.now() + 1,
        type: "ai",
        content: response,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error("Error getting AI response:", error);
      const errorMessage = {
        id: Date.now() + 1,
        type: "ai",
        content: "I'm sorry, I encountered an error while processing your question. Please try again.",
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!showChat) {
    return (
      <Card className="neu-card neu-raised border-none">
        <CardContent className="p-6">
          <div className="text-center">
            <div className="neu-inset rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <MessageCircle className="w-8 h-8 text-blue-500" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">AI Assistant</h3>
            <p className="text-gray-600 mb-4">
              Ask follow-up questions about {brief.competitor_name}'s analysis
            </p>
            <Button
              onClick={() => setShowChat(true)}
              className="neu-button neu-raised bg-gradient-to-r from-blue-500 to-blue-600 text-white border-none"
            >
              <Sparkles className="w-4 h-4 mr-2" />
              Start Conversation
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="neu-card neu-raised border-none">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MessageCircle className="w-5 h-5" />
          AI Assistant - {brief.competitor_name}
        </CardTitle>
      </CardHeader>
      <CardContent className="p-0">
        {/* Messages Area */}
        <div className="h-96 overflow-y-auto p-6 space-y-4">
          {messages.length === 0 && (
            <div className="text-center py-8">
              <div className="neu-inset rounded-full w-12 h-12 mx-auto mb-4 flex items-center justify-center">
                <Bot className="w-6 h-6 text-blue-500" />
              </div>
              <p className="text-gray-600 mb-4">
                Hi! I'm here to help you dive deeper into the {brief.competitor_name} analysis. 
                Ask me anything about their strategy, positioning, or competitive landscape.
              </p>
              <div className="flex flex-wrap gap-2 justify-center">
                {SUGGESTED_QUESTIONS.slice(0, 3).map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleSendMessage(question)}
                    className="neu-button text-xs bg-white hover:bg-blue-50 border-gray-200"
                  >
                    {question}
                  </Button>
                ))}
              </div>
            </div>
          )}

          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
            >
              <div
                className={`max-w-[80%] rounded-lg p-4 ${
                  message.type === "user"
                    ? "neu-raised bg-gradient-to-r from-blue-500 to-blue-600 text-white"
                    : "neu-inset bg-white"
                }`}
              >
                <div className="flex items-start gap-3">
                  <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center ${
                    message.type === "user" ? "bg-white/20" : "bg-blue-100"
                  }`}>
                    {message.type === "user" ? (
                      <User className="w-3 h-3 text-white" />
                    ) : (
                      <Bot className="w-3 h-3 text-blue-500" />
                    )}
                  </div>
                  <div className="flex-1">
                    <p className={`text-sm ${
                      message.type === "user" ? "text-white" : "text-gray-700"
                    }`}>
                      {message.content}
                    </p>
                    <p className={`text-xs mt-2 ${
                      message.type === "user" ? "text-white/70" : "text-gray-400"
                    }`}>
                      {format(message.timestamp, "h:mm a")}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="flex justify-start">
              <div className="neu-inset bg-white rounded-lg p-4 max-w-[80%]">
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                    <Bot className="w-3 h-3 text-blue-500" />
                  </div>
                  <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                    <span className="text-sm text-gray-600">Thinking...</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Suggested Questions */}
        {messages.length === 0 && (
          <div className="px-6 pb-4">
            <h4 className="text-xs font-medium text-gray-500 mb-2">Suggested questions:</h4>
            <div className="flex flex-wrap gap-2">
              {SUGGESTED_QUESTIONS.slice(3).map((question, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => handleSendMessage(question)}
                  className="neu-button text-xs bg-white hover:bg-blue-50 border-gray-200"
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="border-t border-gray-100 p-4">
          <div className="flex gap-3">
            <div className="flex-1 relative">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ask a follow-up question..."
                className="neu-input neu-inset pr-12"
                disabled={isLoading}
              />
            </div>
            <Button
              onClick={() => handleSendMessage()}
              disabled={!inputMessage.trim() || isLoading}
              className="neu-button neu-raised p-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white border-none"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}